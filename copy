// void merge(t_stack **a, t_stack **b)
// {
// 	int i;

// 	i = 0;
	
// 	if ((*a)->size == 1 && (*b)->size == 1)
// 	{
// 		g_kostyl++;
// 		push(a, b);
// 		if ((*a)->head->data > (*a)->head->next->data)
// 		{
// 			swap_st(a);
// 			g_kostyl++;
// 		}
// 		return ;
// 	}
// 	while ((*b)->size)
// 	{
// 		while ((*b)->head->data > (*a)->head->data)
// 		{
// 			if (i >= (*a)->size)
// 				break;
// 			i++;
// 			g_kostyl++;
// 			rotate(a);
// 		}
// 		push(a, b);
// 		g_kostyl++;
// 	}
// 	while (i--)
// 	{
// 		g_kostyl++;
// 		reverse_rotate(a);
// 	}
// }

// void merge_sort(t_stack **a)
// {
// 	t_stack *b;

// 	if ((*a)->size < 2)
// 		return ;
// 	b = malloc(sizeof(t_stack));
// 	init_list(b);
// 	while (b->size <= (*a)->size / 2)
// 	{
// 		g_kostyl++;
// 		push(&b, a);
// 		ft_printf("pb ");
// 	}
// 	merge_sort(a);
// 	merge_sort(&b);
// 	merge(a, &b);
// }



void merge(t_stack **a, t_stack **b)
{
	int i;

	i = 0;
	
	if ((*a)->size == 1 && (*b)->size == 1)
	{
		g_kostyl++;
		push(a, b);
		ft_printf("pa ");
		if (a_head > a_head_next)
		{
			swap_st(a);
			ft_printf("sa ");
			g_kostyl++;
		}
		return ;
	}
	while ((*b)->size)
	{
		while ((*b)->head->data > (*a)->head->data)
		{
			if (i >= (*a)->size)
				break;
			i++;
			g_kostyl++;
			rotate(a);
			ft_printf("ra ");
		}
		push(a, b);
		ft_printf("pa ");
		g_kostyl++;
	}
	while (i--)
	{
		g_kostyl++;
		ft_printf("rra ");
		reverse_rotate(a);
	}
}

void merge_sort(t_stack **a)
{
	t_stack *b;
	int n;
	int i;
	int j;

	i = 0;
	j = 4;
	if ((*a)->size < 2)
		return ;
	b = malloc(sizeof(t_stack));
	init_list(b);
	n = (*a)->size;
	while ((*a)->size - 1)
	{
		i = 0;
		if (a_head > a_head_next)
		{
			ft_printf("sa ");
			swap_st(a);
			g_kostyl++;
		}
		while (a_head > a_tail)
		{
			ft_printf("rra ");			
			reverse_rotate(a);
			g_kostyl++;
		}
		while (a_head < a_head_next)
		{
			// while (b->head && a_head < b_head)
			// {
			// 	push(a, &b);
			// 	g_kostyl+=2;
			// 	ft_printf("pa ");
			// 	swap_st(a);
			// 	ft_printf("sa ");
			// }
			
			while (b->head && b_head > a_head && a_head != min)
			{
				if (i > b->size - 1)
					break;
				if (b->size == 1)
				{
					push(a, &b);
					swap_st(a);
					ft_printf("pa ");
					ft_printf("sa ");
					break;
					g_kostyl+=2;
				}
				ft_printf("rb ");
				g_kostyl++;
				rotate(&b);
				i++;
			}
			ft_printf("pb ");			
			push(&b, a);
			while (i-- > 0)
			{
				g_kostyl++;
				reverse_rotate(&b);	
			}
			// if (b->head->next && b_head < b_head_next)
			// {
			// 	ft_printf("sb ");
			// 	swap_st(&b);
			// 	g_kostyl++;
			// }
	
			g_kostyl++;
		}
	}
	while (b->size)
	{
		ft_printf("pa ");		
		push(a, &b);
		g_kostyl++;
	}


	
	
	// merge_sort(a);
	
	// while (b->size < n)
	// {
	// 	g_kostyl++;
	// 	push(&b, a);
	// 	// rotate(a);
		
	// 	ft_printf("pb ");
	// 	// ft_printf("ra ");
	// }
	// merge_sort(a);
	// merge_sort(&b);
	// merge(a, &b);
	

}



// void merge_sort(t_stack **a)
// {
// 	t_stack *b;
// 	int n;
// 	int i;
// 	int j;
// 	int min;

// 	i = 0;
// 	j = 4;
// 	if ((*a)->size < 2)
// 		return ;
// 	b = malloc(sizeof(t_stack));
// 	init_list(b);
// 	n = (*a)->size;
// 	while ((*a)->size - 1)
// 	{
// 		i = 0;
// 		if (a_head > a_head_next)
// 		{
// 			ft_printf("sa ");
// 			swap_st(a);
// 			g_kostyl++;
// 		}
// 		while (a_head > a_tail)
// 		{
// 			ft_printf("rra ");			
// 			reverse_rotate(a);
// 			g_kostyl++;
// 		}		
// 		while (a_head < a_head_next)
// 		{
// 			while (b->head && a_head < b_head)
// 			{
// 				// if (b->size == 1)
// 				// 	break;
// 				push(a, &b);
// 				g_kostyl+=2;
// 				ft_printf("pa ");
// 				swap_st(a);
// 				ft_printf("sa ");
// 				// rotate(&b);
// 				// ft_printf("rb ");
// 				// i++;
// 			}
// 			ft_printf("pb ");			
// 			push(&b, a);
// 			// while (i > 0)
// 			// {
// 			// 	i--;
// 			// 	g_kostyl++;
// 			// 	reverse_rotate(&b);
// 			// 	ft_printf("rrb ");
// 			// }
// 			// if (b->head->next && b_head < b_head_next)
// 			// {
// 			// 	ft_printf("sb ");
// 			// 	swap_st(&b);
// 			// 	g_kostyl++;
// 			// }
// 			g_kostyl++;
// 		}
// 	}
// 	while (b->size)
// 	{
// 		ft_printf("pa ");		
// 		push(a, &b);
// 		g_kostyl++;
// 	}
	

// }




while (a->size != 3)
	{
		if (a->head->data != a->max && a->head->data != a->min && a->head->data != a->mid)
		{
			ft_printf("pb ");
			push_with_pos(&b, &a, &sorted_stack);
			g_kosty += 1;
		}
		else
		{
			ft_printf("ra ");
			rotate(&a);	
			g_kosty += 1;
		}
	}
	if (a->head->data == a->max && a->head->next->data == a->mid)
	{	
		swap_st(&a);
		ft_printf("sa ");
		g_kosty += 1;
	}
	else if (a->head->data == a->min && a->head->next->data == a->max)
	{
		ft_printf("sa ");
		ft_printf("rra ");
		swap_st(&a);
		reverse_rotate(&a);
		g_kosty += 2;
	}
	else if (a->head->data == a->mid && a->head->next->data == a->min)
	{
		ft_printf("sa ");
		ft_printf("ra ");
		swap_st(&a);
		rotate(&a);
		g_kosty += 2;
	}
	else if (a->head->data == a->max && a->head->next->data == a->min)
	{
		ft_printf("rra ");
		reverse_rotate(&a);
		g_kosty += 1;
	}
	else if (a->head->data == a->min && a->head->next->data == a->mid)
	{
		ft_printf("ra ");
		rotate(&a);
		g_kosty += 1;
	}


	void	new_sort(t_stack **a, t_stack **sorted_stack)
{
	t_stack *b;
	int i;
	
	i = 0;
	b = malloc(sizeof(t_stack));
	init_list(b);
	first_three(*a, b, *sorted_stack);
	while (b->size)
	{
		if (b_head < a_head && b_head > a_tail)
		{
			ft_printf("pa ");
			push_with_pos(a, &b, sorted_stack);
			g_kosty += 1;
		}
		else if (b->size > 1 && b_head_next < a_head && b_head_next > a_tail)
		{
			ft_printf("sb ");
			ft_printf("pa ");
			swap_st(&b);
			push_with_pos(a, &b, sorted_stack);
			g_kosty += 2;
		}
		else if (b_tail < a_head && b_tail > a_tail)
		{
			ft_printf("rrb ");
			ft_printf("pa ");
			reverse_rotate(&b);
			push_with_pos(a, &b, sorted_stack);
			g_kosty += 2;
		}
		else
		{
			
			ft_printf("ra ");
			rotate(a);
			g_kosty += 1;
		}
		// else if (find_sort_pos(*a, b->head->sort_pos) > a_size / 2)
		// {
		// 	ft_printf("rra ");
		// 	reverse_rotate(a);
		// 	g_kosty += 1;
		// }
	}
	if (find_min(*a, &(*a)->min, a_size) > a_size / 2)
		while (find_min(*a, &(*a)->min, a_size) != 0)
		{
			ft_printf("rra ");			
			reverse_rotate(a);
			g_kosty += 1;
		}
	else
		while (find_min(*a, &(*a)->min, a_size) != 0)
		{
			ft_printf("ra ");
			rotate(a);
			g_kosty += 1;
		}
		ft_printf("\n|new_sort : %d |\n", g_kosty);
	// if (!check_sort(*a))
	// 	exit(EXIT_FAILURE);
}



	while (b->head && i++ < pos)
		{
			if (rot == 1)
			{
				ft_printf("rb ");
				g_kosty++;
				b->head->count--;
				rotate(&b);
			}
			else if (rot == 2)
			{
				ft_printf("rrb ");
				b->head->count--;
				g_kosty++;
				reverse_rotate(&b);
			}
			count_rotops(b);
			allign(*a, b);
			pos = find_min_ops(b);
		}
		i = 0;
		b_head->count--;
		while (i++ < b_head->count)
			if (rot == 1)
			{
				pf("ra ");
				g_kosty++;
				rotate(a);
			}
			else
			{
				pf("rra ");
				reverse_rotate(a);
				g_kosty++;
			}
		pf("pa ");
		g_kosty++;
		push(a, &b);
	}








void	new_sort(t_stack **a, t_stack **sorted_stack)
{
	t_stack *b;
	int i;
	int pos_b;
	int rev;
	int rot;
	int pos_a;
	int pos;

	b = malloc(sizeof(t_stack));
	init_list(b);
	first_three(*a, b, *sorted_stack);
	while (b->size)
	{
		i = 0;
		count_rotops(b);
		count_rotops(*a);
		allign(*a, b);
		pos_b = find_min_ops(b);
		pos_a = get_neighb_by_pos(b, pos_b);
		if (get_rev(*a, pos_a) <= get_rot(*a, pos_a) && get_rev(b, pos_b) <= get_rot(b, pos_b))
		{
			rev = ft_min(get_rev(*a, pos_a), get_rev(b, pos_b));
			while (rev-- > 0)
			{
				ft_printf("rrr ");
				rrotate_both(a, &b);
				g_kosty++;
				pos_a = (pos_a + 1)- a_size;
				pos_b = (pos_b + 1) - b->size;			
			}
			pos_a = a_size - pos_a;
			while (pos_a-- > 0)
			{
				ft_printf("rra ");
				g_kosty++;
				reverse_rotate(a);
			}
			pos_b = b->size - pos_b;
			while (pos_b-- > 0)
			{
				g_kosty++;
				ft_printf("rrb ");
				reverse_rotate(&b);
			}
		}
		else if (get_rot(*a, pos_a) < get_rev(*a, pos_a) &&  get_rot(b, pos_b) < get_rev(b, pos_b))
		{
			rot = ft_min(get_rot(*a, pos_a), get_rot(b, pos_b));
			while (rot-- > 0)
			{
				g_kosty++;
				rotate_both(a, &b);
				ft_printf("rr ");
				pos_a--;
				pos_b--;
			}
			while (pos_a-- > 0)
			{
				g_kosty++;
				rotate(a);
				ft_printf("ra ");
			}
			while (pos_b-- > 0)
			{
				g_kosty++;
				ft_printf("rb ");
				rotate(&b);
			}
		}
		else
		{
			if (get_rot(*a, pos_a) <= get_rev(*a, pos_a))
			while (pos_a-- > 0)
			{
				g_kosty++;
				rotate(a);
				ft_printf("ra ");

			}
			else if (get_rev(*a, pos_a) < get_rot(*a, pos_a))
			{
				pos_a = a_size - pos_a;
				while (pos_a-- > 0)
				{
					g_kosty++;
					ft_printf("rra ");
					reverse_rotate(a);
				}
			}
			if (get_rot(b, pos_b) <= get_rev(b, pos_b))
			while (pos_b-- > 0)
			{
				g_kosty++;
				rotate(&b);
				ft_printf("ra ");
			}
			else if (get_rev(b, pos_b) < get_rot(b, pos_b))
			{
				pos_b = b->size - pos_b;
				while (pos_b-- > 0)
				{
					g_kosty++;
					ft_printf("rra ");
					reverse_rotate(&b);
				}
			}
		}
		g_kosty += 1;
		push(a, &b);
		ft_printf("pa ");

	}
 	if (find_min(*a, &(*a)->min, a_size) > a_size / 2)
		while (find_min(*a, &(*a)->min, a_size) != 0)
		{
			ft_printf("rra ");			
			reverse_rotate(a);
			g_kosty += 1;
		}
	else
		while (find_min(*a, &(*a)->min, a_size) != 0)
		{
			ft_printf("ra ");
			rotate(a);
			g_kosty += 1;
		}
	ft_printf("\n|new_sort : %d |\n", g_kosty);

	if (!check_sort(*a))
		terminate("FUCK\n");
}










	if (get_rot(b, pos_b) <= get_rev(b, pos_b))
		{
			rot = get_rr(b, pos_b);
			while (rot-- > 0)
			{
				pf("rr ");
				g_kosty++;
				rotate_both(a, &b);
			}
			rot = get_rot(*a, pos_a);
			while (rot-- > 0)
			{
				pf("ra ");
				g_kosty++;
				rotate(a);
			}
			rot = get_rot(b, pos_b);
			while (rot-- > 0)
			{
				pf("rb ");
				g_kosty++;
				rotate(&b);
			}
		}
		else
		{
			rev = get_rrr(b, pos_b);
			while (rev-- > 0)
			{
				pf("rrr ");
				g_kosty++;
				rrotate_both(a, &b);
			}
			rev = get_rev(*a, pos_a);
			while (rev-- > 0)
			{
				pf("ra ");
				g_kosty++;
				rotate(a);
			}
			rev = get_rev(b, pos_b);
			while (rev-- > 0)
			{
				pf("rb ");
				g_kosty++;
				rotate(&b);
			}
		}


		if (a->pos <= asize / 2 && b->pos <= bsize / 2)
	{
		a->rr = ft_min(a->rot, b->rot);
		b->rr = a->rr;
		a->rrr = 0;
		b->rrr = 0;
		if (a->rot > b->rot)
		{
			a->rot -= a->rr;
			b->rot -= a->rr;
			b->count = a->rot + a->rr;
		}
		else
		{
			a->rot -= a->rr;
			b->rot -= a->rr;
			b->count = b->rot + a->rr;
		}	
	}
	else 
	{
		a->rrr = ft_min(a->rev, b->rev);
		b->rrr = a->rrr;
		a->rr = 0;
		b->rr = 0;
		if (a->rev > b->rev)
		{
			a->rev -= a->rrr;
			b->rev -= a->rrr;
			b->count = a->rev + a->rrr;
		}
		else
		{
			b->rev -= b->rrr;
			a->rev -= b->rrr;
			b->count = b->rev + b->rrr;
		}
	}



	while (b->size)
	{
		i = 0;
		count_rotops(b);
		count_rotops(*a);
		allign(*a, b);
		pos_b = find_min_ops(b);
		pos_a = get_neighb_by_pos(b, pos_b);
		if (get_rot(b, pos_b) <= get_rev(b, pos_b) && !get_rrr(b, pos_b))
		{
			rot = get_rot(b, pos_b);
			pos = get_rr(b, pos_b);
			i = get_data_at(*a, pos_a);
			while (pos-- > 0)
			{
				pf("rr ");
				g_kosty++;
				rotate_both(a, &b);
			}
			while (a_head->data != i)
			{
				g_kosty++;
				if (pos_a <= a_size / 2)
				{
					pf("ra ");
					rotate(a);
				}
				else
				{
					pf("rra ");
					reverse_rotate(a);
				}
			}
			while (rot-- > 0)
			{
				pf("rb ");
				g_kosty++;
				rotate(&b);
			}
		}
		else
		{
			pos = get_rrr(b, pos_b);
			i = get_data_at(*a, pos_a);
			rev = get_rev(b, pos_b);
			while (pos-- > 0)
			{
				pf("rrr ");
				g_kosty++;
				rrotate_both(a, &b);
			}
			while (a_head->data != i)
			{
				g_kosty++;
				if (pos_a <= a_size / 2)
				{
					pf("ra ");
					rotate(a);
				}
				else
				{
					pf("rra ");
					reverse_rotate(a);
				}
			}
			while (rev-- > 0)
			{
				pf("rrb ");
				g_kosty++;
				reverse_rotate(&b);
			}
		}